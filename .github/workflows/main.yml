# =================================================================
# ros2-ci.yml - 최종 완성본
# 
# on: 언제 이 CI를 실행할지 정의합니다. (push, pull_request)
# jobs: 어떤 작업을 할지 정의합니다.
#   runs-on: 어떤 서버에서 실행할지 지정합니다. (ubuntu-latest)
#   steps: 작업을 어떤 순서로 진행할지 구체적으로 나열합니다.
# =================================================================

name: ROS2 CI for Raspberry Pi Robot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '**' ]

jobs:
  build-and-test-on-arm64:
    runs-on: ubuntu-latest
    steps:
      # 1단계: 내 GitHub 저장소의 코드를 서버로 가져오기
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2단계: 서버가 ARM64 환경을 흉내낼 수 있도록 QEMU 설정
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3단계: 고급 Docker 빌드 기능 활성화
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # 4단계: 'Dockerfile'을 이용해 ARM64 테스트용 이미지 만들기
      # 이 단계에서 Docker Hub로부터 베이스 이미지를 내려받아 최종 테스트 이미지를 만듭니다.
      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          tags: my-robot-test-image:latest
          push: false
          load: true

      # 5단계: [최종 실행] 완성된 이미지 컨테이너 안에서 코드 테스트하기
      # -v ./src:/ros2_ws/src : 내 프로젝트의 src 폴더를 컨테이너 안으로 연결
      # docker run ... /bin/bash -c "..." : 컨테이너를 실행하고, 그 안에서 따옴표 안의 명령어들을 순서대로 실행
      - name: Run build and test inside the container
        run: |
          docker run --rm -v ./src:/ros2_ws/src my-robot-test-image:latest /bin/bash -c " \
            set -e && \
            source /opt/ros/humble/setup.bash && \
            cd /ros2_ws && \
            rosdep install --from-paths src --ignore-src -r -y --rosdistro humble && \
            colcon build --symlink-install --event-handlers console_direct+ && \
            colcon test \
          "
