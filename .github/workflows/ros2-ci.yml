# =================================================================
# ros2-ci.yml - 최종 완성본 (디스크 공간 확보 기능 강화)
# =================================================================

name: ROS2 CI for sh-dev branch

on:
  # 1. sh-dev 브랜치에 코드가 push 될 때 실행
  push:
    branches:
      - sh-dev
  
  # 2. 어떤 브랜치에서 sh-dev 브랜치로 Pull Request를 보낼 때 실행
  pull_request:
    branches:
      - sh-dev

jobs:
  build-and-test-on-arm64:
    # 이 작업은 GitHub이 제공하는 최신 우분투 가상 서버에서 실행됩니다.
    runs-on: ubuntu-latest
    
    # 이 작업의 각 단계를 순서대로 정의합니다.
    steps:
      # 0단계: 불필요한 기본 설치 파일들을 제거하여 가상 서버의 디스크 공간을 최대한 확보합니다.
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          # 기본적으로 남겨둘 시스템 예약 공간을 512MB로 최소화합니다.
          root-reserve-mb: 512
          # 스왑 공간을 1GB로 설정합니다.
          swap-size-mb: 1024
          # 우리 프로젝트와 관련 없는 .NET, Android, Haskell 관련 큰 파일들을 제거합니다.
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          # 추가로, 기본 설치된 다른 Docker 이미지들과 모든 문서 파일도 제거하여 공간을 더 확보합니다.
          remove-docker-images: 'true'
          remove-usr-share-doc: 'true'

      # 1단계: 우리 GitHub 저장소의 코드를 가상 서버 안으로 가져옵니다(checkout).
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2단계: 가상 서버(x86_64)가 ARM64 환경을 흉내낼 수 있도록 QEMU를 설정합니다.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3단계: 멀티 아키텍처 Docker 빌드를 위한 Buildx 기능을 활성화합니다.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # 4단계: 프로젝트의 'Dockerfile'을 이용해 ARM64용 테스트 이미지를 만듭니다.
      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          tags: my-robot-test-image:latest
          push: false
          load: true

      # 5단계: 완성된 테스트 이미지로 컨테이너를 실행하고, 그 안에서 실제 빌드와 테스트를 수행합니다.
      - name: Run build and test inside the container
        run: |
          docker run --rm -v ./src:/ros2_ws/src my-robot-test-image:latest /bin/bash -c " \
            set -e && \
            source /opt/ros/humble/setup.bash && \
            cd /ros2_ws && \
            rosdep install --from-paths src --ignore-src -r -y --rosdistro humble && \
            colcon build --symlink-install --event-handlers console_direct+ && \
            colcon test \
          "
