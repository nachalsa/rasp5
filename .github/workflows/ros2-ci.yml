# =================================================================
# ros2-ci-cd.yml - CI(테스트)와 CD(배포)를 모두 수행하는 최종 완성본
# =================================================================

name: ROS2 CI and Deploy on Picar Robot

on:
  # 오직 'main' 브랜치에 코드가 push 될 때만 이 모든 과정을 실행합니다.
  push:
    branches:
      - main

jobs:
  # 첫 번째 작업: 코드를 빌드하고 테스트하는 CI 단계
  build_and_test:
    name: Build and Test
    # 이 작업은 우리가 등록한 'self-hosted' 러너에서 실행됩니다.
    runs-on: self-hosted

    steps:
      # 1. GitHub 저장소의 코드를 로봇의 작업 폴더로 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. `humble` Docker 컨테이너 내부에서 빌드와 테스트를 실행합니다.
      - name: Run build-test commands inside container
        run: |
          echo "--- [CI] Starting build & test process ---"
          docker cp $GITHUB_WORKSPACE/src/. humble:/home/ubuntu/ros2_ws/src
          docker exec humble /bin/bash -c " \
            set -e && \
            source /opt/ros/humble/setup.bash && \
            cd /ros2_ws && \
            rosdep install --from-paths src --ignore-src -r -y && \
            colcon build --symlink-install && \
            colcon test \
          "
  
  # 두 번째 작업: CI가 성공하면, 실제 로봇에 배포하는 CD 단계
  deploy_to_picar:
    name: Deploy to Picar
    # CI 작업(build_and_test)이 성공해야만 이 작업이 실행됩니다.
    needs: build_and_test
    # 이 작업 역시 우리 로봇에서 실행됩니다.
    runs-on: self-hosted

    steps:
      # 1. 로봇에 미리 만들어 둔 배포 스크립트를 실행합니다.
      - name: Run deployment script on Picar
        run: |
          echo "--- [CD] Triggering deployment script on the host ---"
          /bin/bash /home/car/deploy.sh
