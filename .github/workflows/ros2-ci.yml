# =================================================================
# ros2-ci.yml - 오직 코드 검증(CI) 역할만 수행하는 워크플로우
# =================================================================

name: ROS2 CI (Build and Test)

on:
  # 'sh-dev' 브랜치를 대상으로 하는 Pull Request가 생성/업데이트 될 때만 실행
  pull_request:
    branches:
      - sh-dev
      - main
jobs:
  # 작업 이름: 코드 빌드 및 테스트
  build_and_test:
    name: Build and Test on Picar
    # 이 작업은 우리가 등록한 'self-hosted' 러너에서 실행됩니다.
    runs-on: self-hosted

    # 이 작업은 'humble' Docker 컨테이너를 임시로 사용합니다.
    # 이렇게 하면 실제 로봇의 /ros2_ws 폴더를 건드리지 않고,
    # 매번 깨끗한 상태에서 테스트를 수행할 수 있습니다.
    container:
      image: hwangsanha7/rasp5-base:humble
      options: --user root # 컨테이너 내에서 root 권한으로 명령어 실행

    steps:
      # 1단계: Pull Request에 포함된 최신 코드를 컨테이너 안의 특정 폴더로 가져옵니다.
      # 컨테이너를 사용하면, 코드가 바로 컨테이너 내부의 /__w 폴더에 받아집니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2단계: 컨테이너 안에서 빌드와 테스트를 실행합니다.
      - name: Build and Test inside container
        # 셸을 bash로 지정하고, 작업 디렉토리를 코드 위치로 설정합니다.
        shell: bash
        working-directory: /__w/rasp5/rasp5 # actions/checkout이 코드를 받아온 기본 경로
        run: |
          echo "--- [CI] Starting build & test process ---"
          
          # 컨테이너 안에는 이미 ROS2 환경이 있으므로 바로 source 합니다.
          source /opt/ros/humble/setup.bash
          
          echo "--- Installing ROS dependencies (rosdep) ---"
          # 일부 시스템 의존성 설치를 위해 apt-get update를 먼저 실행합니다.
          apt-get update && rosdep install --from-paths src --ignore-src -r -y --rosdistro humble
          
          echo "--- Building workspace (colcon build) ---"
          colcon build --symlink-install --event-handlers console_direct+
          
          echo "--- Running tests (colcon test) ---"
          colcon test
