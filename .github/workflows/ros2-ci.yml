# =================================================================
# ros2-ci.yml - 최종 완성본 (sh-dev 전용, CI/CD 통합)
# 
# 이 워크플로우는 오직 'sh-dev' 브랜치에 push 이벤트가 발생했을 때만 실행됩니다.
# 모든 작업은 우리가 등록한 'picar' 로봇(self-hosted)에서 수행됩니다.
# =================================================================

name: ROS2 CI and Deploy on Picar Robot (for sh-dev)

on:
  # 오직 'sh-dev' 브랜치에 코드가 push 될 때만 이 모든 과정을 실행합니다.
  push:
    branches:
      - sh-dev

jobs:
  # 첫 번째 작업: 코드를 빌드하고 테스트하는 CI 단계
  build_and_test:
    name: Build and Test
    runs-on: self-hosted

    steps:
      # 1. GitHub 저장소의 코드를 로봇의 작업 폴더로 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 'humble' Docker 컨테이너 내부에서 빌드와 테스트를 실행합니다.
      - name: Run build-test commands inside container
        run: |
          echo "--- [CI] Starting build & test process for sh-dev ---"
          # 컨테이너 안에 작업 폴더가 없을 경우를 대비해 미리 생성합니다.
          docker exec humble /bin/bash -c "mkdir -p /ros2_ws/src"
          # CI가 내려받은 소스 코드를 컨테이너 안으로 복사합니다.
          docker cp $GITHUB_WORKSPACE/src/. humble:/ros2_ws/src
          # 컨테이너 안에서 빌드/테스트 스크립트를 실행합니다.
          docker exec humble /bin/bash -c " \
            set -e && \
            source /opt/ros/humble/setup.bash && \
            cd /ros2_ws && \
            rosdep install --from-paths src --ignore-src -r -y --rosdistro humble && \
            colcon build --symlink-install && \
            colcon test \
          "

  # 두 번째 작업: CI가 성공하면, 실제 로봇에 배포하는 CD 단계
  deploy_to_picar:
    name: Deploy to Picar
    # CI 작업(build_and_test)이 성공해야만 이 작업이 실행됩니다.
    needs: build_and_test
    runs-on: self-hosted

    steps:
      # 1. 로봇에 미리 만들어 둔 배포 스크립트를 실행합니다.
      - name: Run deployment script on Picar
        run: |
          echo "--- [CD] Triggering deployment script for sh-dev ---"
          # 이 스크립트가 실제 git pull, build, launch를 모두 처리합니다.
          /bin/bash /home/car/deploy.sh
