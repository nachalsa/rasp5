# 파일 경로: .github/workflows/pipeline.yml
# 역할: 볼륨 마운트를 사용하여 CI/CD를 수행하는 최종 파이프라인

name: Main CI/CD Pipeline

on:
  push:
    branches: [ sh-dev, main ]
  pull_request:
    branches: [ main ]

jobs:
  # ===============================================
  # JOB 1: CI (품질 검사 및 아티팩트 생성)
  # ===============================================
  build_and_test:
    name: 1. Build, Test & Create Artifact
    runs-on: self-hosted

    steps:
      # 1. Runner의 작업 공간으로 코드를 다운로드합니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. [★최종 해결책★] 볼륨 마운트를 사용하여 CI 작업을 실행합니다.
      - name: Run Lint, Build, and Test using Volume Mount
        run: |
          echo "--- Starting CI process with volume mount ---"
          # docker run 명령어로 임시 컨테이너를 실행하고, 작업이 끝나면 자동으로 삭제(--rm)합니다.
          # -v (볼륨 마운트): Runner의 '$GITHUB_WORKSPACE'(소스코드)를 컨테이너의 '/ros2_ws'에 연결합니다.
          docker run --rm \
            -v "$GITHUB_WORKSPACE:/ros2_ws" \
            rasp5-ci:humble /bin/bash -c " \
              set -e && \
              source /opt/ros/humble/setup.bash && \
              cd /ros2_ws && \
              rosdep install --from-paths src --ignore-src -r -y --rosdistro humble && \
              colcon lint --packages-select rasp5 && \
              colcon build --symlink-install --packages-up-to rasp5 && \
              colcon test --packages-select rasp5 && \
              colcon test-result --verbose \
            "

      # 3. Artifact 업로드
      # 이제 소스코드도 GITHUB_WORKSPACE에서 직접 가져오면 됩니다.
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ros2-build-artifact
          # 이제 빌드 결과물은 로봇에 없으므로, 소스 코드만 아티팩트로 올립니다.
          # CD 단계에서 이 소스코드를 받아 빌드하게 됩니다. (이 방식이 더 안정적일 수 있습니다)
          # 또는, 빌드 결과물을 마운트된 다른 폴더에 생성하여 올릴 수도 있습니다.
          # 지금은 가장 간단한 방식으로, 소스 자체를 아티팩트로 만듭니다.
          path: . 

  # ===============================================
  # JOB 2: CD (배포)
  # ===============================================
  deploy:
    name: 2. Deploy to Picar
    runs-on: self-hosted
    needs: build_and_test
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/sh-dev')

    steps:
      - name: Download Source Artifact
        uses: actions/download-artifact@v4
        with:
          name: ros2-build-artifact

      # CD 단계에서는 git pull 대신, 검증된 아티팩트(소스코드)를 설치합니다.
      - name: Install Source Code
        run: |
          rsync -a --delete ./ /home/car/rasp5/
      
      # 이제 로봇의 실제 환경에서 빌드를 수행합니다.
      - name: Build on Robot
        run: |
          cd /home/car/rasp5 && \
          source /opt/ros/humble/setup.bash && \
          colcon build --symlink-install

      - name: Restart ROS2 Service
        run: |
          sudo systemctl restart picar_ros2.service
