# 파일 경로: .github/workflows/pipeline.yml
# 역할: 가장 단순하고 확실한 구조로 CI/CD를 수행합니다.

name: Main CI/CD Pipeline
on:
  push: { branches: [ sh-dev, main ] }
  pull_request: { branches: [ main ] }

jobs:
  # ===============================================
  # JOB 1: CI (로봇에 있는 'ci-runner'를 사용)
  # ===============================================
  build_and_test:
    name: 1. Build, Test & Create Artifact
    runs-on: self-hosted

    steps:
      # 1. Runner의 작업 공간으로 소스 코드를 다운로드합니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. [★최종 해결책★] 로봇에 항상 켜져 있는 'ci-runner' 컨테이너에게 일을 시킵니다.
      - name: Run CI tasks inside the running container
        run: |
          # 먼저, Runner의 소스 코드를 컨테이너 안으로 복사합니다.
          # GITHUB_WORKSPACE는 Runner의 소스 코드 경로를 담고 있습니다.
          docker cp "$GITHUB_WORKSPACE/src" ci-runner:/ros2_ws/

          # 이제, 컨테이너 안에서 작업을 수행하라고 명령합니다.
          docker exec ci-runner /bin/bash -c " \
            set -e && \
            source /opt/ros/humble/setup.bash && \
            cd /ros2_ws && \
            rosdep install --from-paths src --ignore-src -r -y --rosdistro humble && \
            colcon lint --packages-select rasp5 && \
            colcon build --symlink-install --packages-up-to rasp5 && \
            colcon test --packages-select rasp5 && \
            colcon test-result --verbose \
          "

      # 3. 빌드 결과물을 아티팩트로 만듭니다.
      - name: Copy build results from container for artifact
        run: |
          mkdir -p ./artifact_payload
          docker cp ci-runner:/ros2_ws/install ./artifact_payload/install
          
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ./artifact_payload/

  # ===============================================
  # JOB 2: CD (배포)
  # ===============================================
  deploy:
    name: 2. Deploy to Picar
    runs-on: self-hosted
    needs: build_and_test
    if: success()

    steps:
      # CD 단계에서는 CI가 만든 '빌드 결과물'을 다운로드합니다.
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      
      # 소스 코드도 따로 받아옵니다 (설정 파일 등이 필요할 수 있으므로).
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Artifact and Source to Project Directory
        run: |
          # 먼저 소스 코드를 설치 (설정 파일 등을 위해)
          rsync -a --delete "$GITHUB_WORKSPACE/" /home/car/rasp5/ --exclude 'install' --exclude 'build' --exclude 'log'
          # 그 위에 빌드 결과물(install 폴더)을 덮어씁니다.
          rsync -a --delete ./install/ /home/car/rasp5/install/

      - name: Restart ROS2 Service
        run: sudo systemctl restart picar_ros2.service
