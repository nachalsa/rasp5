# 워크플로우의 이름
name: Autonomous Car CI

# 워크플로우를 트리거하는 이벤트 설정
on:
  push:
    branches: [ sh-dev ]
  pull_request:
    branches: [ main ]

# 실행될 작업(job) 목록
jobs:
  # ==========================================================
  # 작업 1: 코드 정적 분석 (린트) 및 보고서 생성
  # ==========================================================
  lint-and-report:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # pip 패키지 다운로드 캐싱
      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Python 의존성 설치 (pylint 등)
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      # Pylint 실행 및 보고서 파일 생성
      - name: Lint with Pylint and Generate Report
        run: |
          mkdir -p reports
          # pylint가 실패해도 CI가 멈추지 않도록 || true 추가
          pylint --rcfile=.pylintrc src/picar_pkg | tee reports/pylint_report.txt || true

      # 생성된 린트 보고서를 아티팩트로 업로드
      - name: Upload Pylint Report
        uses: actions/upload-artifact@v4
        with:
          name: pylint-report
          path: reports/

  # ==========================================================
  # 작업 2: 빌드, 단위 테스트, 통합 테스트 실행
  # ==========================================================
  build-and-test:
    # 'lint-and-report' 작업이 성공해야만 이 작업이 실행됨
    needs: lint-and-report
    runs-on: ubuntu-22.04
    steps:
      # 1. 소스 코드 체크아웃
      # ROS 2 워크스페이스 구조(workspace/src/package_name)에 맞게 경로 지정
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: src/picar_pkg

      # 2. ROS 2 설치 캐싱
      # 캐시가 있으면 ROS 2 설치를 건너뛰어 시간을 절약
      - name: Cache ROS 2 installation
        id: cache-ros
        uses: actions/cache@v4
        with:
          path: /opt/ros/humble
          key: ${{ runner.os }}-ros-humble-v1

      # 3. ROS 2 설치 (캐시가 없을 경우에만 실행)
      - name: Set up ROS 2
        if: steps.cache-ros.outputs.cache-hit != 'true'
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble

      # 4. [핵심] rosdep으로 모든 의존성 설치
      # libspdlog.so.1 같은 누락된 공유 라이브러리 문제를 해결하는 가장 확실한 방법
      - name: Install All Dependencies with rosdep
        run: |
          sudo apt-get update
          # rosdep 도구 자체를 설치
          sudo apt-get install -y python3-rosdep
          # rosdep 초기화 및 데이터베이스 업데이트
          sudo rosdep init && rosdep update
          # package.xml을 기반으로 워크스페이스에 필요한 모든 의존성을 설치
          rosdep install --from-paths src --ignore-src -y --rosdistro humble

      # 5. 워크스페이스 빌드
      - name: Build the ROS 2 package
        run: |
          source /opt/ros/humble/setup.bash
          colcon build --packages-select picar_pkg

      # 6. 단위 테스트 실행
      - name: Run Unit Tests with Pytest
        run: |
          # 빌드된 환경과 ROS 2 시스템 환경을 모두 활성화
          source /opt/ros/humble/setup.bash
          source install/setup.bash
          pytest tests/

      # 7. 통합 테스트 실행
      - name: Run the Integration Test script
        run: |
          # 빌드된 환경과 ROS 2 시스템 환경을 모두 활성화
          source /opt/ros/humble/setup.bash
          source install/setup.bash
          ros2 run picar_pkg test_runner
