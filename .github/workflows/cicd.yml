# 워크플로우의 이름
name: Autonomous Car CI (Optimized)

# 워크플로우를 트리거하는 이벤트 설정
on:
  push:
    branches: [ sh-dev ]
  pull_request:
    branches: [ main ]

jobs:
  # ==========================================================
  # 작업 1: 코드 정적 분석 (가장 빠름)
  # ==========================================================
  linting:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
      - name: Lint with Pylint
        run: pylint --rcfile=.pylintrc src/picar_pkg

  # ==========================================================
  # 작업 2: 빌드 및 통합 테스트 (가장 무거움)
  # ==========================================================
  build-and-test:
    # 린팅 작업이 성공해야만 시작
    needs: linting
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: src/picar_pkg
      - name: Cache ROS 2 installation
        id: cache-ros
        uses: actions/cache@v4
        with:
          path: /opt/ros/humble
          key: ${{ runner.os }}-ros-humble-v1
      - name: Set up ROS 2
        if: steps.cache-ros.outputs.cache-hit != 'true'
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble
      
      - name: Install ROS 2, Python and GUI dependencies
        run: |
          # 1. ROS 2 apt 저장소 설정
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt-get update

          # 2. ROS 2, 개발 도구 및 GUI 라이브러리 설치
          #    rosdep을 쓰지 않고, 필요한 것을 직접 명시적으로 설치
          sudo apt-get install -y ros-humble-ros-base ros-dev-tools xvfb
          
          # 3. Python 의존성 설치
          pip install -r src/picar_pkg/requirements.txt
          
      - name: Build the ROS 2 package
        run: |
          source /opt/ros/humble/setup.bash
          colcon build --packages-select picar_pkg
          
      - name: Run Unit Tests with colcon
        run: |
          source /opt/ros/humble/setup.bash
          source install/setup.bash
          colcon test --packages-select picar_pkg --event-handlers console_direct+

      # ▼▼▼▼▼ 마지막 단계: 가상 화면을 켜고 통합 테스트 실행 ▼▼▼▼▼
      - name: Run the Integration Test script
        run: |
          # 가상 화면을 백그라운드에서 실행
          Xvfb :99 -screen 0 1024x768x16 &
          
          # 환경 변수를 통해 모든 GUI 출력을 가상 화면 :99로 보냄
          export DISPLAY=:99
          
          # 통합 테스트 스크립트 실행
          source /opt/ros/humble/setup.bash
          source install/setup.bash
          ros2 run picar_pkg test_runner
