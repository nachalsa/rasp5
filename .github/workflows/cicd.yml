# 워크플로우 이름
name: Autonomous Car CI (Optimized Cache)

# 워크플로우 트리거 조건
on:
  push:
    branches: [ sh-dev ]
  pull_request:
    branches: [ main ]

jobs:
  # 1. 린팅 작업: 코드 스타일 검사 (변경 없음)
  linting:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f src/picar_pkg/requirements.txt ]; then pip install -r src/picar_pkg/requirements.txt; fi

      - name: Generate Pylint Log File
        run: |
          find src -name "*.py" -print0 > python_files.list
          xargs -0 pylint --rcfile=./src/picar_pkg/.pylintrc \
            --disable=E0401,C0114,C0116,R0903 \
            < python_files.list > pylint-log.txt \
            || true
      
      - name: Upload Pylint Log
        uses: actions/upload-artifact@v4
        with:
          name: pylint-log
          path: pylint-log.txt

  # 2. 빌드 및 테스트 작업 (캐싱 최적화 적용)
  build-and-test:
    needs: linting
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ★★★★★ 이 부분이 핵심 수정 사항입니다 ★★★★★
      - name: Cache ROS 2 and Dependencies
        id: cache-ros-deps # 이 캐시 단계에 ID를 부여합니다.
        uses: actions/cache@v4 # 캐시 액션 최신 버전 사용
        with:
          # 캐싱할 대상 경로 목록
          path: |
            /opt/ros/humble        # ROS 2 설치 경로
            /var/lib/apt/lists     # apt 패키지 목록 캐시
            ~/.cache/pip           # pip 패키지 캐시
          
          # 캐시를 식별하는 고유 키
          # 패키지 설정 파일(package.xml, requirements.txt)이 변경되면 새로운 캐시를 생성합니다.
          key: ${{ runner.os }}-ros-humble-deps-v3-${{ hashFiles('src/picar_pkg/package.xml', 'src/picar_pkg/requirements.txt') }}
          
          # key가 정확히 일치하지 않을 때, 이전 버전의 캐시라도 불러오기 위한 설정
          restore-keys: |
            ${{ runner.os }}-ros-humble-deps-v3-

      # ★★★★★ 의존성 설치 단계 수정 ★★★★★
      - name: Install ROS 2 and Dependencies
        # if 조건문을 사용: 캐시를 찾았을 경우(cache-hit), 이 단계를 건너뜁니다.
        # 이렇게 하면, 의존성이 변경되지 않았을 때 시간이 오래 걸리는 설치 과정을 생략할 수 있습니다.
        if: steps.cache-ros-deps.outputs.cache-hit != 'true'
        run: |
          echo "Cache not found, running full installation..."
          sudo apt-get update
          sudo apt-get install -y python3-rosdep xvfb
          sudo rosdep init || true
          rosdep update
          rosdep install --from-paths src --ignore-src -y -r --rosdistro humble
        env:
          DEBIAN_FRONTEND: noninteractive

      # ROS 환경 설정은 캐시 유무와 상관없이 항상 필요합니다.
      - name: Set up ROS 2 Environment
        run: source /opt/ros/humble/setup.bash

      # ★★★★★ 이하 단계는 기존과 동일합니다 ★★★★★
      - name: Start virtual framebuffer
        run: Xvfb :99 -screen 0 1024x768x16 &

      - name: Build and Run All Tests
        env:
          DISPLAY: ":99"
        run: |
          # run 블록 안에서는 환경을 다시 활성화해줘야 합니다.
          source /opt/ros/humble/setup.bash
          
          echo "--- Starting build ---"
          colcon build --packages-select picar_pkg
          
          echo "--- Starting test ---"
          source install/setup.bash
          colcon test --packages-select picar_pkg --event-handlers console_direct+

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            build/
            install/
            log/
