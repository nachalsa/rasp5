# 워크플로우의 이름
name: Autonomous Car CI (Restructured)

# 워크플로우를 트리거하는 이벤트 설정
on:
  push:
    branches: [ sh-dev ]
  pull_request:
    branches: [ main ]

jobs:
  linting:
    # (이 작업은 이전과 동일, 변경 없음)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Install Python dependencies
        run: pip install -r requirements.txt
      - name: Lint with Pylint
        run: |
          pylint --disable=E0401,C0114,C0116,R0903 \
                 --rcfile=.pylintrc \
                 src/picar_pkg \
                 || true

  # ▼▼▼▼▼ 이 작업의 구조를 완전히 재구성합니다 ▼▼▼▼▼
  build-and-test:
    needs: linting
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: src/picar_pkg

      - name: Cache ROS 2 installation
        id: cache-ros
        uses: actions/cache@v4
        with:
          path: /opt/ros/humble
          key: ${{ runner.os }}-ros-humble-v1

      - name: Set up ROS 2
        if: steps.cache-ros.outputs.cache-hit != 'true'
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble

      - name: Install ROS 2 and Python dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            curl gnupg lsb-release xvfb
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y ros-humble-ros-base ros-dev-tools
          pip install -r src/picar_pkg/requirements.txt
      
      # [새로운 구조] 가상 화면을 먼저 켭니다.
      - name: Start virtual framebuffer
        run: Xvfb :99 -screen 0 1024x768x16 &

      # [새로운 구조] 빌드와 모든 테스트를 하나의 스텝에서 실행합니다.
      - name: Build and Run All Tests
        # 모든 GUI 출력을 가상 화면으로 보냅니다.
        env:
          DISPLAY: ":99"
        run: |
          # ROS 2 환경 활성화
          source /opt/ros/humble/setup.bash
          
          # 먼저 빌드를 수행합니다.
          colcon build --packages-select picar_pkg
          
          # 빌드된 환경을 활성화하고 모든 테스트를 실행합니다.
          source install/setup.bash
          colcon test --packages-select picar_pkg --event-handlers console_direct+
